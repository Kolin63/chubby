#!/usr/bin/env bash

###############################################################################
#
# HELP
#
###############################################################################

function print_help() {
  echo
  echo "usage: chubby [-Dn] [-f file] scp_arguments"
  echo ""
  echo "Work Locally, Edit Remotely!" 
  echo ""
  echo "Chubby is a wrapper around scp that aids in the process of editing"
  echo "files locally and sending them to a remote server. This can be useful"
  echo "if testing or deployment needs to be done on the remote server, but"
  echo "you don't want to commit all of your small tweaks onto Git."
  echo ""
  echo "USING CHUBBY"
  echo "Start by making a file named .chubby in the root directory of your"
  echo "project. In the file, use the syntax of \`[args] src dest\`. An"
  echo "example line would be: \`-rOD src/ john@example.com:~/project/src/\`"
  echo "Note that Chubby Files are line based, so make sure to put one"
  echo "operation on a line."
  echo ""
  echo "Now that the .chubby file is made, you can run the command 'chubby' in"
  echo "any directory and that file will be executed."
  echo ""
  echo "Since Chubby is an scp wrapper, any arguments not listed below will be"
  echo "passed to scp. Therefore, any and all scp arguments are valid for"
  echo "Chubby to use."
  echo ""
  echo "-D      Deletes the file or directory before performing the copy."
  echo ""
  echo "-n      Don't read from a file."
  echo ""
  echo "-f file"
  echo "        The name of the file to read from. Defaults to '.chubby'. The"
  echo "        search for this file starts in the current working directory,"
  echo "        and continues to check in the parent directory until it"
  echo "        reaches ~ or /."
}

if [[ "$1" == "-h" ]] || [ "$1" == "--help" ]; then
  print_help
  exit 0
fi

###############################################################################
#
# ARGUMENT PARSING
#
###############################################################################

file=".chubby"
file_path=""
file_waiting=-1
file_contents=""

switch_D=""
switch_n=""

scp_args=""

# params: single argument, original argument number
function parse_arg() {

  local arg=${1}
  local narg=${2}

  if [ $file_waiting -ne $narg ]; then
    file_waiting=-1
  fi

  if [[ ${arg:0:1} = "-" ]]; then
    for (( chari=1; chari<${#arg}; chari++ )); do

      char=${arg:$chari:1}

      # handle switches
      if   [[ "$char" == "D" ]]; then
        switch_D="-D"
      elif [[ "$char" == "n" ]]; then
        switch_n="-n"

      # handle arguments
      elif [[ "$char" == "f" ]]; then
        file_waiting=$((i+1))

      # handle scp arguments
      else
        scp_args="$scp_args-$char "

      fi

    done

  # handle argument values
  elif [ $file_waiting -eq $narg ]; then
    file=$arg

  # handle scp arguments
  else
    scp_args="$scp_args$arg "

  fi
}

# params: arguments
function execute_line() {

  switch_D=""
  switch_n=""
  scp_args=""

  for (( i=1; i<=$#; i++ )); do
    local arg=${!i}
    parse_arg $arg $i
  done

  if [[ ! $scp_args == "" ]]; then
    scp $scp_args
  fi
}

function find_file() {
  local dir=$(pwd)
  while [ ! -e "$dir/$file" ] && [ ! -e $file ]; do
    dir=$(realpath "$dir/../")
    if [[ "$dir" == "$HOME" ]] || [[ "$dir" == "/" ]]; then
      echo "Could not find file $file"
      print_help
      exit 1
    fi
  done

  local ffile=$(realpath $file)
  if [ ! -e $ffile ]; then
    ffile=$(realpath "$dir/$file")
  fi
  file_path=$ffile
  file_contents=$(cat "$file_path")
}

function execute_file() {
  find_file

  local wc=$(wc -l $file_path)
  local lines=${wc%% *}
  echo "$file has $lines lines"

  for ((i=1; i<=$lines; i++)); do
    execute_line $(sed -n "$(echo $i)p" $file_path)
  done
}

###############################################################################
#
# MAIN
#
###############################################################################

execute_line $@
if [[ "$switch_n" == "" ]]; then
  execute_file $file_contents
fi
